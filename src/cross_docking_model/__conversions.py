from typing import List, Dict

import numpy as np


def create_label(label: str, size: int) -> List:
    """
    Returns a list of labels of a specified size, generated by concatenating the given string with a numerical
    index.

    Args:
        label: A string to be concatenated with a numerical index.
        size: The size of the resulting list of labels.

    Returns:
        A list of labels, generated by concatenating the given string with a numerical index.
    """
    return [f"{label}_{i}" for i in range(1, size + 1)]


def create_dict_from_array(array: np.ndarray, label: List) -> Dict:
    """
    Given a numpy array and corresponding labels, returns a dictionary
    mapping each label to its corresponding array value.

    Args:
        array (np.ndarray): A numpy array.
        label (List): A list of labels for the array.

    Returns:
        Dict: A dictionary mapping each label to its corresponding array value.

    Raises:
        ValueError: If the length of the label list does not match the shape of the array.
    """
    if len(label) != array.shape[0]:
        raise ValueError("Length of label list does not match shape of array")

    data = {}

    for index, value in enumerate(array):
        data[label[index]] = value

    return data


def create_dict_from_2d_matrix(matrix: np.ndarray, label_i: List, label_j: List) -> Dict:
    """
    Create a dictionary from a 2D numpy array and two lists of row and column labels.

    Args:
        matrix (np.ndarray): A 2D numpy array.
        label_i (List): A list of row labels.
        label_j (List): A list of column labels.

    Returns:
        Dict: A dictionary where keys are tuples of row and column labels, and values are the corresponding values
              in the matrix.

    Raises:
        ValueError: If the length of the label lists do not match the shape of the matrix.
    """
    if len(label_i) != matrix.shape[0] or len(label_j) != matrix.shape[1]:
        raise ValueError("Length of label lists does not match shape of matrix")

    data = {}

    for i, label1 in enumerate(label_i):
        for j, label2 in enumerate(label_j):
            data[label1, label2] = matrix[i, j]

    return data


def create_dict_from_3d_matrix(matrix: np.ndarray, label_i: List, label_j: List, label_k: List) -> Dict:
    """
    Given a 3D matrix and corresponding labels, returns a dictionary
    mapping each label triple to its corresponding matrix value.

    Args:
        matrix (np.ndarray): A 3D numpy array.
        label_i (List): A list of labels for the first dimension of the matrix.
        label_j (List): A list of labels for the second dimension of the matrix.
        label_k (List): A list of labels for the third dimension of the matrix.

    Returns:
        Dict: A dictionary mapping each label triple to its corresponding matrix value.

    Raises:
        ValueError: If the length of the label lists do not match the shape of the matrix.
    """
    if len(label_i) != matrix.shape[0] or len(label_j) != matrix.shape[1] or len(label_k) != matrix.shape[2]:
        raise ValueError("Length of label lists does not match shape of matrix")

    data = {}

    for i, label1 in enumerate(label_i):
        for j, label2 in enumerate(label_j):
            for k, label3 in enumerate(label_k):
                data[label1, label2, label3] = matrix[i, j, k]

    return data
